# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _glpki
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


GLP_MAJOR_VERSION = _glpki.GLP_MAJOR_VERSION
GLP_MINOR_VERSION = _glpki.GLP_MINOR_VERSION
class glp_prob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_prob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_prob, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_prob"] = _glpki.glp_prob__opaque_prob_set
    __swig_getmethods__["_opaque_prob"] = _glpki.glp_prob__opaque_prob_get
    if _newclass:_opaque_prob = _swig_property(_glpki.glp_prob__opaque_prob_get, _glpki.glp_prob__opaque_prob_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_prob(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_prob
    __del__ = lambda self : None;
glp_prob_swigregister = _glpki.glp_prob_swigregister
glp_prob_swigregister(glp_prob)

GLP_MIN = _glpki.GLP_MIN
GLP_MAX = _glpki.GLP_MAX
GLP_CV = _glpki.GLP_CV
GLP_IV = _glpki.GLP_IV
GLP_BV = _glpki.GLP_BV
GLP_FR = _glpki.GLP_FR
GLP_LO = _glpki.GLP_LO
GLP_UP = _glpki.GLP_UP
GLP_DB = _glpki.GLP_DB
GLP_FX = _glpki.GLP_FX
GLP_BS = _glpki.GLP_BS
GLP_NL = _glpki.GLP_NL
GLP_NU = _glpki.GLP_NU
GLP_NF = _glpki.GLP_NF
GLP_NS = _glpki.GLP_NS
GLP_SF_GM = _glpki.GLP_SF_GM
GLP_SF_EQ = _glpki.GLP_SF_EQ
GLP_SF_2N = _glpki.GLP_SF_2N
GLP_SF_SKIP = _glpki.GLP_SF_SKIP
GLP_SF_AUTO = _glpki.GLP_SF_AUTO
GLP_SOL = _glpki.GLP_SOL
GLP_IPT = _glpki.GLP_IPT
GLP_MIP = _glpki.GLP_MIP
GLP_UNDEF = _glpki.GLP_UNDEF
GLP_FEAS = _glpki.GLP_FEAS
GLP_INFEAS = _glpki.GLP_INFEAS
GLP_NOFEAS = _glpki.GLP_NOFEAS
GLP_OPT = _glpki.GLP_OPT
GLP_UNBND = _glpki.GLP_UNBND
class glp_long(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_long, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lo"] = _glpki.glp_long_lo_set
    __swig_getmethods__["lo"] = _glpki.glp_long_lo_get
    if _newclass:lo = _swig_property(_glpki.glp_long_lo_get, _glpki.glp_long_lo_set)
    __swig_setmethods__["hi"] = _glpki.glp_long_hi_set
    __swig_getmethods__["hi"] = _glpki.glp_long_hi_get
    if _newclass:hi = _swig_property(_glpki.glp_long_hi_get, _glpki.glp_long_hi_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_long(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_long
    __del__ = lambda self : None;
glp_long_swigregister = _glpki.glp_long_swigregister
glp_long_swigregister(glp_long)

class glp_bfcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_bfcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_bfcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_lev"] = _glpki.glp_bfcp_msg_lev_set
    __swig_getmethods__["msg_lev"] = _glpki.glp_bfcp_msg_lev_get
    if _newclass:msg_lev = _swig_property(_glpki.glp_bfcp_msg_lev_get, _glpki.glp_bfcp_msg_lev_set)
    __swig_setmethods__["type"] = _glpki.glp_bfcp_type_set
    __swig_getmethods__["type"] = _glpki.glp_bfcp_type_get
    if _newclass:type = _swig_property(_glpki.glp_bfcp_type_get, _glpki.glp_bfcp_type_set)
    __swig_setmethods__["lu_size"] = _glpki.glp_bfcp_lu_size_set
    __swig_getmethods__["lu_size"] = _glpki.glp_bfcp_lu_size_get
    if _newclass:lu_size = _swig_property(_glpki.glp_bfcp_lu_size_get, _glpki.glp_bfcp_lu_size_set)
    __swig_setmethods__["piv_tol"] = _glpki.glp_bfcp_piv_tol_set
    __swig_getmethods__["piv_tol"] = _glpki.glp_bfcp_piv_tol_get
    if _newclass:piv_tol = _swig_property(_glpki.glp_bfcp_piv_tol_get, _glpki.glp_bfcp_piv_tol_set)
    __swig_setmethods__["piv_lim"] = _glpki.glp_bfcp_piv_lim_set
    __swig_getmethods__["piv_lim"] = _glpki.glp_bfcp_piv_lim_get
    if _newclass:piv_lim = _swig_property(_glpki.glp_bfcp_piv_lim_get, _glpki.glp_bfcp_piv_lim_set)
    __swig_setmethods__["suhl"] = _glpki.glp_bfcp_suhl_set
    __swig_getmethods__["suhl"] = _glpki.glp_bfcp_suhl_get
    if _newclass:suhl = _swig_property(_glpki.glp_bfcp_suhl_get, _glpki.glp_bfcp_suhl_set)
    __swig_setmethods__["eps_tol"] = _glpki.glp_bfcp_eps_tol_set
    __swig_getmethods__["eps_tol"] = _glpki.glp_bfcp_eps_tol_get
    if _newclass:eps_tol = _swig_property(_glpki.glp_bfcp_eps_tol_get, _glpki.glp_bfcp_eps_tol_set)
    __swig_setmethods__["max_gro"] = _glpki.glp_bfcp_max_gro_set
    __swig_getmethods__["max_gro"] = _glpki.glp_bfcp_max_gro_get
    if _newclass:max_gro = _swig_property(_glpki.glp_bfcp_max_gro_get, _glpki.glp_bfcp_max_gro_set)
    __swig_setmethods__["nfs_max"] = _glpki.glp_bfcp_nfs_max_set
    __swig_getmethods__["nfs_max"] = _glpki.glp_bfcp_nfs_max_get
    if _newclass:nfs_max = _swig_property(_glpki.glp_bfcp_nfs_max_get, _glpki.glp_bfcp_nfs_max_set)
    __swig_setmethods__["upd_tol"] = _glpki.glp_bfcp_upd_tol_set
    __swig_getmethods__["upd_tol"] = _glpki.glp_bfcp_upd_tol_get
    if _newclass:upd_tol = _swig_property(_glpki.glp_bfcp_upd_tol_get, _glpki.glp_bfcp_upd_tol_set)
    __swig_setmethods__["nrs_max"] = _glpki.glp_bfcp_nrs_max_set
    __swig_getmethods__["nrs_max"] = _glpki.glp_bfcp_nrs_max_get
    if _newclass:nrs_max = _swig_property(_glpki.glp_bfcp_nrs_max_get, _glpki.glp_bfcp_nrs_max_set)
    __swig_setmethods__["rs_size"] = _glpki.glp_bfcp_rs_size_set
    __swig_getmethods__["rs_size"] = _glpki.glp_bfcp_rs_size_get
    if _newclass:rs_size = _swig_property(_glpki.glp_bfcp_rs_size_get, _glpki.glp_bfcp_rs_size_set)
    __swig_setmethods__["foo_bar"] = _glpki.glp_bfcp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _glpki.glp_bfcp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_glpki.glp_bfcp_foo_bar_get, _glpki.glp_bfcp_foo_bar_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_bfcp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_bfcp
    __del__ = lambda self : None;
glp_bfcp_swigregister = _glpki.glp_bfcp_swigregister
glp_bfcp_swigregister(glp_bfcp)
GLP_BF_FT = _glpki.GLP_BF_FT
GLP_BF_BG = _glpki.GLP_BF_BG
GLP_BF_GR = _glpki.GLP_BF_GR

class glp_smcp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_smcp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_smcp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_lev"] = _glpki.glp_smcp_msg_lev_set
    __swig_getmethods__["msg_lev"] = _glpki.glp_smcp_msg_lev_get
    if _newclass:msg_lev = _swig_property(_glpki.glp_smcp_msg_lev_get, _glpki.glp_smcp_msg_lev_set)
    __swig_setmethods__["meth"] = _glpki.glp_smcp_meth_set
    __swig_getmethods__["meth"] = _glpki.glp_smcp_meth_get
    if _newclass:meth = _swig_property(_glpki.glp_smcp_meth_get, _glpki.glp_smcp_meth_set)
    __swig_setmethods__["pricing"] = _glpki.glp_smcp_pricing_set
    __swig_getmethods__["pricing"] = _glpki.glp_smcp_pricing_get
    if _newclass:pricing = _swig_property(_glpki.glp_smcp_pricing_get, _glpki.glp_smcp_pricing_set)
    __swig_setmethods__["r_test"] = _glpki.glp_smcp_r_test_set
    __swig_getmethods__["r_test"] = _glpki.glp_smcp_r_test_get
    if _newclass:r_test = _swig_property(_glpki.glp_smcp_r_test_get, _glpki.glp_smcp_r_test_set)
    __swig_setmethods__["tol_bnd"] = _glpki.glp_smcp_tol_bnd_set
    __swig_getmethods__["tol_bnd"] = _glpki.glp_smcp_tol_bnd_get
    if _newclass:tol_bnd = _swig_property(_glpki.glp_smcp_tol_bnd_get, _glpki.glp_smcp_tol_bnd_set)
    __swig_setmethods__["tol_dj"] = _glpki.glp_smcp_tol_dj_set
    __swig_getmethods__["tol_dj"] = _glpki.glp_smcp_tol_dj_get
    if _newclass:tol_dj = _swig_property(_glpki.glp_smcp_tol_dj_get, _glpki.glp_smcp_tol_dj_set)
    __swig_setmethods__["tol_piv"] = _glpki.glp_smcp_tol_piv_set
    __swig_getmethods__["tol_piv"] = _glpki.glp_smcp_tol_piv_get
    if _newclass:tol_piv = _swig_property(_glpki.glp_smcp_tol_piv_get, _glpki.glp_smcp_tol_piv_set)
    __swig_setmethods__["obj_ll"] = _glpki.glp_smcp_obj_ll_set
    __swig_getmethods__["obj_ll"] = _glpki.glp_smcp_obj_ll_get
    if _newclass:obj_ll = _swig_property(_glpki.glp_smcp_obj_ll_get, _glpki.glp_smcp_obj_ll_set)
    __swig_setmethods__["obj_ul"] = _glpki.glp_smcp_obj_ul_set
    __swig_getmethods__["obj_ul"] = _glpki.glp_smcp_obj_ul_get
    if _newclass:obj_ul = _swig_property(_glpki.glp_smcp_obj_ul_get, _glpki.glp_smcp_obj_ul_set)
    __swig_setmethods__["it_lim"] = _glpki.glp_smcp_it_lim_set
    __swig_getmethods__["it_lim"] = _glpki.glp_smcp_it_lim_get
    if _newclass:it_lim = _swig_property(_glpki.glp_smcp_it_lim_get, _glpki.glp_smcp_it_lim_set)
    __swig_setmethods__["tm_lim"] = _glpki.glp_smcp_tm_lim_set
    __swig_getmethods__["tm_lim"] = _glpki.glp_smcp_tm_lim_get
    if _newclass:tm_lim = _swig_property(_glpki.glp_smcp_tm_lim_get, _glpki.glp_smcp_tm_lim_set)
    __swig_setmethods__["out_frq"] = _glpki.glp_smcp_out_frq_set
    __swig_getmethods__["out_frq"] = _glpki.glp_smcp_out_frq_get
    if _newclass:out_frq = _swig_property(_glpki.glp_smcp_out_frq_get, _glpki.glp_smcp_out_frq_set)
    __swig_setmethods__["out_dly"] = _glpki.glp_smcp_out_dly_set
    __swig_getmethods__["out_dly"] = _glpki.glp_smcp_out_dly_get
    if _newclass:out_dly = _swig_property(_glpki.glp_smcp_out_dly_get, _glpki.glp_smcp_out_dly_set)
    __swig_setmethods__["presolve"] = _glpki.glp_smcp_presolve_set
    __swig_getmethods__["presolve"] = _glpki.glp_smcp_presolve_get
    if _newclass:presolve = _swig_property(_glpki.glp_smcp_presolve_get, _glpki.glp_smcp_presolve_set)
    __swig_setmethods__["foo_bar"] = _glpki.glp_smcp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _glpki.glp_smcp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_glpki.glp_smcp_foo_bar_get, _glpki.glp_smcp_foo_bar_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_smcp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_smcp
    __del__ = lambda self : None;
glp_smcp_swigregister = _glpki.glp_smcp_swigregister
glp_smcp_swigregister(glp_smcp)
GLP_MSG_OFF = _glpki.GLP_MSG_OFF
GLP_MSG_ERR = _glpki.GLP_MSG_ERR
GLP_MSG_ON = _glpki.GLP_MSG_ON
GLP_MSG_ALL = _glpki.GLP_MSG_ALL
GLP_MSG_DBG = _glpki.GLP_MSG_DBG
GLP_PRIMAL = _glpki.GLP_PRIMAL
GLP_DUALP = _glpki.GLP_DUALP
GLP_DUAL = _glpki.GLP_DUAL
GLP_PT_STD = _glpki.GLP_PT_STD
GLP_PT_PSE = _glpki.GLP_PT_PSE
GLP_RT_STD = _glpki.GLP_RT_STD
GLP_RT_HAR = _glpki.GLP_RT_HAR

class glp_tree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_tree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_tree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_tree"] = _glpki.glp_tree__opaque_tree_set
    __swig_getmethods__["_opaque_tree"] = _glpki.glp_tree__opaque_tree_get
    if _newclass:_opaque_tree = _swig_property(_glpki.glp_tree__opaque_tree_get, _glpki.glp_tree__opaque_tree_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_tree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_tree
    __del__ = lambda self : None;
glp_tree_swigregister = _glpki.glp_tree_swigregister
glp_tree_swigregister(glp_tree)

class glp_iocp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_iocp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_iocp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_lev"] = _glpki.glp_iocp_msg_lev_set
    __swig_getmethods__["msg_lev"] = _glpki.glp_iocp_msg_lev_get
    if _newclass:msg_lev = _swig_property(_glpki.glp_iocp_msg_lev_get, _glpki.glp_iocp_msg_lev_set)
    __swig_setmethods__["br_tech"] = _glpki.glp_iocp_br_tech_set
    __swig_getmethods__["br_tech"] = _glpki.glp_iocp_br_tech_get
    if _newclass:br_tech = _swig_property(_glpki.glp_iocp_br_tech_get, _glpki.glp_iocp_br_tech_set)
    __swig_setmethods__["bt_tech"] = _glpki.glp_iocp_bt_tech_set
    __swig_getmethods__["bt_tech"] = _glpki.glp_iocp_bt_tech_get
    if _newclass:bt_tech = _swig_property(_glpki.glp_iocp_bt_tech_get, _glpki.glp_iocp_bt_tech_set)
    __swig_setmethods__["tol_int"] = _glpki.glp_iocp_tol_int_set
    __swig_getmethods__["tol_int"] = _glpki.glp_iocp_tol_int_get
    if _newclass:tol_int = _swig_property(_glpki.glp_iocp_tol_int_get, _glpki.glp_iocp_tol_int_set)
    __swig_setmethods__["tol_obj"] = _glpki.glp_iocp_tol_obj_set
    __swig_getmethods__["tol_obj"] = _glpki.glp_iocp_tol_obj_get
    if _newclass:tol_obj = _swig_property(_glpki.glp_iocp_tol_obj_get, _glpki.glp_iocp_tol_obj_set)
    __swig_setmethods__["tm_lim"] = _glpki.glp_iocp_tm_lim_set
    __swig_getmethods__["tm_lim"] = _glpki.glp_iocp_tm_lim_get
    if _newclass:tm_lim = _swig_property(_glpki.glp_iocp_tm_lim_get, _glpki.glp_iocp_tm_lim_set)
    __swig_setmethods__["out_frq"] = _glpki.glp_iocp_out_frq_set
    __swig_getmethods__["out_frq"] = _glpki.glp_iocp_out_frq_get
    if _newclass:out_frq = _swig_property(_glpki.glp_iocp_out_frq_get, _glpki.glp_iocp_out_frq_set)
    __swig_setmethods__["out_dly"] = _glpki.glp_iocp_out_dly_set
    __swig_getmethods__["out_dly"] = _glpki.glp_iocp_out_dly_get
    if _newclass:out_dly = _swig_property(_glpki.glp_iocp_out_dly_get, _glpki.glp_iocp_out_dly_set)
    __swig_setmethods__["cb_func"] = _glpki.glp_iocp_cb_func_set
    __swig_getmethods__["cb_func"] = _glpki.glp_iocp_cb_func_get
    if _newclass:cb_func = _swig_property(_glpki.glp_iocp_cb_func_get, _glpki.glp_iocp_cb_func_set)
    __swig_setmethods__["cb_info"] = _glpki.glp_iocp_cb_info_set
    __swig_getmethods__["cb_info"] = _glpki.glp_iocp_cb_info_get
    if _newclass:cb_info = _swig_property(_glpki.glp_iocp_cb_info_get, _glpki.glp_iocp_cb_info_set)
    __swig_setmethods__["cb_size"] = _glpki.glp_iocp_cb_size_set
    __swig_getmethods__["cb_size"] = _glpki.glp_iocp_cb_size_get
    if _newclass:cb_size = _swig_property(_glpki.glp_iocp_cb_size_get, _glpki.glp_iocp_cb_size_set)
    __swig_setmethods__["pp_tech"] = _glpki.glp_iocp_pp_tech_set
    __swig_getmethods__["pp_tech"] = _glpki.glp_iocp_pp_tech_get
    if _newclass:pp_tech = _swig_property(_glpki.glp_iocp_pp_tech_get, _glpki.glp_iocp_pp_tech_set)
    __swig_setmethods__["mip_gap"] = _glpki.glp_iocp_mip_gap_set
    __swig_getmethods__["mip_gap"] = _glpki.glp_iocp_mip_gap_get
    if _newclass:mip_gap = _swig_property(_glpki.glp_iocp_mip_gap_get, _glpki.glp_iocp_mip_gap_set)
    __swig_setmethods__["mir_cuts"] = _glpki.glp_iocp_mir_cuts_set
    __swig_getmethods__["mir_cuts"] = _glpki.glp_iocp_mir_cuts_get
    if _newclass:mir_cuts = _swig_property(_glpki.glp_iocp_mir_cuts_get, _glpki.glp_iocp_mir_cuts_set)
    __swig_setmethods__["gmi_cuts"] = _glpki.glp_iocp_gmi_cuts_set
    __swig_getmethods__["gmi_cuts"] = _glpki.glp_iocp_gmi_cuts_get
    if _newclass:gmi_cuts = _swig_property(_glpki.glp_iocp_gmi_cuts_get, _glpki.glp_iocp_gmi_cuts_set)
    __swig_setmethods__["cov_cuts"] = _glpki.glp_iocp_cov_cuts_set
    __swig_getmethods__["cov_cuts"] = _glpki.glp_iocp_cov_cuts_get
    if _newclass:cov_cuts = _swig_property(_glpki.glp_iocp_cov_cuts_get, _glpki.glp_iocp_cov_cuts_set)
    __swig_setmethods__["clq_cuts"] = _glpki.glp_iocp_clq_cuts_set
    __swig_getmethods__["clq_cuts"] = _glpki.glp_iocp_clq_cuts_get
    if _newclass:clq_cuts = _swig_property(_glpki.glp_iocp_clq_cuts_get, _glpki.glp_iocp_clq_cuts_set)
    __swig_setmethods__["presolve"] = _glpki.glp_iocp_presolve_set
    __swig_getmethods__["presolve"] = _glpki.glp_iocp_presolve_get
    if _newclass:presolve = _swig_property(_glpki.glp_iocp_presolve_get, _glpki.glp_iocp_presolve_set)
    __swig_setmethods__["binarize"] = _glpki.glp_iocp_binarize_set
    __swig_getmethods__["binarize"] = _glpki.glp_iocp_binarize_get
    if _newclass:binarize = _swig_property(_glpki.glp_iocp_binarize_get, _glpki.glp_iocp_binarize_set)
    __swig_setmethods__["foo_bar"] = _glpki.glp_iocp_foo_bar_set
    __swig_getmethods__["foo_bar"] = _glpki.glp_iocp_foo_bar_get
    if _newclass:foo_bar = _swig_property(_glpki.glp_iocp_foo_bar_get, _glpki.glp_iocp_foo_bar_set)
    __swig_setmethods__["fn_sol"] = _glpki.glp_iocp_fn_sol_set
    __swig_getmethods__["fn_sol"] = _glpki.glp_iocp_fn_sol_get
    if _newclass:fn_sol = _swig_property(_glpki.glp_iocp_fn_sol_get, _glpki.glp_iocp_fn_sol_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_iocp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_iocp
    __del__ = lambda self : None;
glp_iocp_swigregister = _glpki.glp_iocp_swigregister
glp_iocp_swigregister(glp_iocp)
GLP_BR_FFV = _glpki.GLP_BR_FFV
GLP_BR_LFV = _glpki.GLP_BR_LFV
GLP_BR_MFV = _glpki.GLP_BR_MFV
GLP_BR_DTH = _glpki.GLP_BR_DTH
GLP_BR_HPC = _glpki.GLP_BR_HPC
GLP_BT_DFS = _glpki.GLP_BT_DFS
GLP_BT_BFS = _glpki.GLP_BT_BFS
GLP_BT_BLB = _glpki.GLP_BT_BLB
GLP_BT_BPH = _glpki.GLP_BT_BPH
GLP_PP_NONE = _glpki.GLP_PP_NONE
GLP_PP_ROOT = _glpki.GLP_PP_ROOT
GLP_PP_ALL = _glpki.GLP_PP_ALL

class glp_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _glpki.glp_attr_level_set
    __swig_getmethods__["level"] = _glpki.glp_attr_level_get
    if _newclass:level = _swig_property(_glpki.glp_attr_level_get, _glpki.glp_attr_level_set)
    __swig_setmethods__["origin"] = _glpki.glp_attr_origin_set
    __swig_getmethods__["origin"] = _glpki.glp_attr_origin_get
    if _newclass:origin = _swig_property(_glpki.glp_attr_origin_get, _glpki.glp_attr_origin_set)
    __swig_setmethods__["klass"] = _glpki.glp_attr_klass_set
    __swig_getmethods__["klass"] = _glpki.glp_attr_klass_get
    if _newclass:klass = _swig_property(_glpki.glp_attr_klass_get, _glpki.glp_attr_klass_set)
    __swig_setmethods__["foo_bar"] = _glpki.glp_attr_foo_bar_set
    __swig_getmethods__["foo_bar"] = _glpki.glp_attr_foo_bar_get
    if _newclass:foo_bar = _swig_property(_glpki.glp_attr_foo_bar_get, _glpki.glp_attr_foo_bar_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_attr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_attr
    __del__ = lambda self : None;
glp_attr_swigregister = _glpki.glp_attr_swigregister
glp_attr_swigregister(glp_attr)
GLP_RF_REG = _glpki.GLP_RF_REG
GLP_RF_LAZY = _glpki.GLP_RF_LAZY
GLP_RF_CUT = _glpki.GLP_RF_CUT
GLP_RF_GMI = _glpki.GLP_RF_GMI
GLP_RF_MIR = _glpki.GLP_RF_MIR
GLP_RF_COV = _glpki.GLP_RF_COV
GLP_RF_CLQ = _glpki.GLP_RF_CLQ

GLP_ON = _glpki.GLP_ON
GLP_OFF = _glpki.GLP_OFF
GLP_IROWGEN = _glpki.GLP_IROWGEN
GLP_IBINGO = _glpki.GLP_IBINGO
GLP_IHEUR = _glpki.GLP_IHEUR
GLP_ICUTGEN = _glpki.GLP_ICUTGEN
GLP_IBRANCH = _glpki.GLP_IBRANCH
GLP_ISELECT = _glpki.GLP_ISELECT
GLP_IPREPRO = _glpki.GLP_IPREPRO
GLP_NO_BRNCH = _glpki.GLP_NO_BRNCH
GLP_DN_BRNCH = _glpki.GLP_DN_BRNCH
GLP_UP_BRNCH = _glpki.GLP_UP_BRNCH
GLP_EBADB = _glpki.GLP_EBADB
GLP_ESING = _glpki.GLP_ESING
GLP_ECOND = _glpki.GLP_ECOND
GLP_EBOUND = _glpki.GLP_EBOUND
GLP_EFAIL = _glpki.GLP_EFAIL
GLP_EOBJLL = _glpki.GLP_EOBJLL
GLP_EOBJUL = _glpki.GLP_EOBJUL
GLP_EITLIM = _glpki.GLP_EITLIM
GLP_ETMLIM = _glpki.GLP_ETMLIM
GLP_ENOPFS = _glpki.GLP_ENOPFS
GLP_ENODFS = _glpki.GLP_ENODFS
GLP_EROOT = _glpki.GLP_EROOT
GLP_ESTOP = _glpki.GLP_ESTOP
GLP_EMIPGAP = _glpki.GLP_EMIPGAP
GLP_ENOFEAS = _glpki.GLP_ENOFEAS
GLP_ENOCVG = _glpki.GLP_ENOCVG
GLP_EINSTAB = _glpki.GLP_EINSTAB
GLP_EDATA = _glpki.GLP_EDATA
GLP_ERANGE = _glpki.GLP_ERANGE
GLP_MPS_DECK = _glpki.GLP_MPS_DECK
GLP_MPS_FILE = _glpki.GLP_MPS_FILE
class glp_tran(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, glp_tran, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, glp_tran, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_opaque_tran"] = _glpki.glp_tran__opaque_tran_set
    __swig_getmethods__["_opaque_tran"] = _glpki.glp_tran__opaque_tran_get
    if _newclass:_opaque_tran = _swig_property(_glpki.glp_tran__opaque_tran_get, _glpki.glp_tran__opaque_tran_set)
    def __init__(self, *args): 
        this = _glpki.new_glp_tran(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_glp_tran
    __del__ = lambda self : None;
glp_tran_swigregister = _glpki.glp_tran_swigregister
glp_tran_swigregister(glp_tran)

glp_create_prob = _glpki.glp_create_prob
glp_set_prob_name = _glpki.glp_set_prob_name
glp_set_obj_name = _glpki.glp_set_obj_name
glp_set_obj_dir = _glpki.glp_set_obj_dir
glp_add_rows = _glpki.glp_add_rows
glp_add_cols = _glpki.glp_add_cols
glp_set_row_name = _glpki.glp_set_row_name
glp_set_col_name = _glpki.glp_set_col_name
glp_set_row_bnds = _glpki.glp_set_row_bnds
glp_set_col_bnds = _glpki.glp_set_col_bnds
glp_set_obj_coef = _glpki.glp_set_obj_coef
glp_set_mat_row = _glpki.glp_set_mat_row
glp_set_mat_col = _glpki.glp_set_mat_col
glp_load_matrix = _glpki.glp_load_matrix
glp_del_rows = _glpki.glp_del_rows
glp_del_cols = _glpki.glp_del_cols
glp_copy_prob = _glpki.glp_copy_prob
glp_erase_prob = _glpki.glp_erase_prob
glp_delete_prob = _glpki.glp_delete_prob
glp_get_prob_name = _glpki.glp_get_prob_name
glp_get_obj_name = _glpki.glp_get_obj_name
glp_get_obj_dir = _glpki.glp_get_obj_dir
glp_get_num_rows = _glpki.glp_get_num_rows
glp_get_num_cols = _glpki.glp_get_num_cols
glp_get_row_name = _glpki.glp_get_row_name
glp_get_col_name = _glpki.glp_get_col_name
glp_get_row_type = _glpki.glp_get_row_type
glp_get_row_lb = _glpki.glp_get_row_lb
glp_get_row_ub = _glpki.glp_get_row_ub
glp_get_col_type = _glpki.glp_get_col_type
glp_get_col_lb = _glpki.glp_get_col_lb
glp_get_col_ub = _glpki.glp_get_col_ub
glp_get_obj_coef = _glpki.glp_get_obj_coef
glp_get_num_nz = _glpki.glp_get_num_nz
glp_get_mat_row = _glpki.glp_get_mat_row
glp_get_mat_col = _glpki.glp_get_mat_col
glp_create_index = _glpki.glp_create_index
glp_find_row = _glpki.glp_find_row
glp_find_col = _glpki.glp_find_col
glp_delete_index = _glpki.glp_delete_index
glp_set_rii = _glpki.glp_set_rii
glp_set_sjj = _glpki.glp_set_sjj
glp_get_rii = _glpki.glp_get_rii
glp_get_sjj = _glpki.glp_get_sjj
glp_scale_prob = _glpki.glp_scale_prob
glp_unscale_prob = _glpki.glp_unscale_prob
glp_set_row_stat = _glpki.glp_set_row_stat
glp_set_col_stat = _glpki.glp_set_col_stat
glp_std_basis = _glpki.glp_std_basis
glp_adv_basis = _glpki.glp_adv_basis
glp_cpx_basis = _glpki.glp_cpx_basis
glp_simplex = _glpki.glp_simplex
glp_exact = _glpki.glp_exact
glp_init_smcp = _glpki.glp_init_smcp
glp_get_status = _glpki.glp_get_status
glp_get_prim_stat = _glpki.glp_get_prim_stat
glp_get_dual_stat = _glpki.glp_get_dual_stat
glp_get_obj_val = _glpki.glp_get_obj_val
glp_get_row_stat = _glpki.glp_get_row_stat
glp_get_row_prim = _glpki.glp_get_row_prim
glp_get_row_dual = _glpki.glp_get_row_dual
glp_get_col_stat = _glpki.glp_get_col_stat
glp_get_col_prim = _glpki.glp_get_col_prim
glp_get_col_dual = _glpki.glp_get_col_dual
glp_get_unbnd_ray = _glpki.glp_get_unbnd_ray
glp_interior = _glpki.glp_interior
glp_ipt_status = _glpki.glp_ipt_status
glp_ipt_obj_val = _glpki.glp_ipt_obj_val
glp_ipt_row_prim = _glpki.glp_ipt_row_prim
glp_ipt_row_dual = _glpki.glp_ipt_row_dual
glp_ipt_col_prim = _glpki.glp_ipt_col_prim
glp_ipt_col_dual = _glpki.glp_ipt_col_dual
glp_set_col_kind = _glpki.glp_set_col_kind
glp_get_col_kind = _glpki.glp_get_col_kind
glp_get_num_int = _glpki.glp_get_num_int
glp_get_num_bin = _glpki.glp_get_num_bin
glp_intopt = _glpki.glp_intopt
glp_init_iocp = _glpki.glp_init_iocp
glp_mip_status = _glpki.glp_mip_status
glp_mip_obj_val = _glpki.glp_mip_obj_val
glp_mip_row_val = _glpki.glp_mip_row_val
glp_mip_col_val = _glpki.glp_mip_col_val
glp_read_sol = _glpki.glp_read_sol
glp_write_sol = _glpki.glp_write_sol
glp_read_ipt = _glpki.glp_read_ipt
glp_write_ipt = _glpki.glp_write_ipt
glp_read_mip = _glpki.glp_read_mip
glp_write_mip = _glpki.glp_write_mip
glp_bf_exists = _glpki.glp_bf_exists
glp_factorize = _glpki.glp_factorize
glp_bf_updated = _glpki.glp_bf_updated
glp_get_bfcp = _glpki.glp_get_bfcp
glp_set_bfcp = _glpki.glp_set_bfcp
glp_get_bhead = _glpki.glp_get_bhead
glp_get_row_bind = _glpki.glp_get_row_bind
glp_get_col_bind = _glpki.glp_get_col_bind
glp_ftran = _glpki.glp_ftran
glp_btran = _glpki.glp_btran
glp_eval_tab_row = _glpki.glp_eval_tab_row
glp_eval_tab_col = _glpki.glp_eval_tab_col
glp_ios_reason = _glpki.glp_ios_reason
glp_ios_get_prob = _glpki.glp_ios_get_prob
glp_ios_tree_size = _glpki.glp_ios_tree_size
glp_ios_curr_node = _glpki.glp_ios_curr_node
glp_ios_next_node = _glpki.glp_ios_next_node
glp_ios_prev_node = _glpki.glp_ios_prev_node
glp_ios_up_node = _glpki.glp_ios_up_node
glp_ios_node_level = _glpki.glp_ios_node_level
glp_ios_node_bound = _glpki.glp_ios_node_bound
glp_ios_best_node = _glpki.glp_ios_best_node
glp_ios_mip_gap = _glpki.glp_ios_mip_gap
glp_ios_node_data = _glpki.glp_ios_node_data
glp_ios_row_attr = _glpki.glp_ios_row_attr
glp_ios_pool_size = _glpki.glp_ios_pool_size
glp_ios_add_row = _glpki.glp_ios_add_row
glp_ios_del_row = _glpki.glp_ios_del_row
glp_ios_clear_pool = _glpki.glp_ios_clear_pool
glp_ios_can_branch = _glpki.glp_ios_can_branch
glp_ios_branch_upon = _glpki.glp_ios_branch_upon
glp_ios_select_node = _glpki.glp_ios_select_node
glp_ios_heur_sol = _glpki.glp_ios_heur_sol
glp_ios_terminate = _glpki.glp_ios_terminate
glp_version = _glpki.glp_version
glp_term_out = _glpki.glp_term_out
glp_term_hook = _glpki.glp_term_hook
glp_malloc = _glpki.glp_malloc
glp_calloc = _glpki.glp_calloc
glp_free = _glpki.glp_free
glp_mem_usage = _glpki.glp_mem_usage
glp_mem_limit = _glpki.glp_mem_limit
glp_free_env = _glpki.glp_free_env
glp_read_mps = _glpki.glp_read_mps
glp_write_mps = _glpki.glp_write_mps
glp_read_lp = _glpki.glp_read_lp
glp_write_lp = _glpki.glp_write_lp
glp_mpl_alloc_wksp = _glpki.glp_mpl_alloc_wksp
glp_mpl_read_model = _glpki.glp_mpl_read_model
glp_mpl_read_data = _glpki.glp_mpl_read_data
glp_mpl_generate = _glpki.glp_mpl_generate
glp_mpl_build_prob = _glpki.glp_mpl_build_prob
glp_mpl_postsolve = _glpki.glp_mpl_postsolve
glp_mpl_free_wksp = _glpki.glp_mpl_free_wksp
glp_main = _glpki.glp_main
class _glp_graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _glp_graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _glp_graph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pool"] = _glpki._glp_graph_pool_set
    __swig_getmethods__["pool"] = _glpki._glp_graph_pool_get
    if _newclass:pool = _swig_property(_glpki._glp_graph_pool_get, _glpki._glp_graph_pool_set)
    __swig_setmethods__["name"] = _glpki._glp_graph_name_set
    __swig_getmethods__["name"] = _glpki._glp_graph_name_get
    if _newclass:name = _swig_property(_glpki._glp_graph_name_get, _glpki._glp_graph_name_set)
    __swig_setmethods__["nv_max"] = _glpki._glp_graph_nv_max_set
    __swig_getmethods__["nv_max"] = _glpki._glp_graph_nv_max_get
    if _newclass:nv_max = _swig_property(_glpki._glp_graph_nv_max_get, _glpki._glp_graph_nv_max_set)
    __swig_setmethods__["nv"] = _glpki._glp_graph_nv_set
    __swig_getmethods__["nv"] = _glpki._glp_graph_nv_get
    if _newclass:nv = _swig_property(_glpki._glp_graph_nv_get, _glpki._glp_graph_nv_set)
    __swig_setmethods__["na"] = _glpki._glp_graph_na_set
    __swig_getmethods__["na"] = _glpki._glp_graph_na_get
    if _newclass:na = _swig_property(_glpki._glp_graph_na_get, _glpki._glp_graph_na_set)
    __swig_setmethods__["v"] = _glpki._glp_graph_v_set
    __swig_getmethods__["v"] = _glpki._glp_graph_v_get
    if _newclass:v = _swig_property(_glpki._glp_graph_v_get, _glpki._glp_graph_v_set)
    __swig_setmethods__["index"] = _glpki._glp_graph_index_set
    __swig_getmethods__["index"] = _glpki._glp_graph_index_get
    if _newclass:index = _swig_property(_glpki._glp_graph_index_get, _glpki._glp_graph_index_set)
    __swig_setmethods__["v_size"] = _glpki._glp_graph_v_size_set
    __swig_getmethods__["v_size"] = _glpki._glp_graph_v_size_get
    if _newclass:v_size = _swig_property(_glpki._glp_graph_v_size_get, _glpki._glp_graph_v_size_set)
    __swig_setmethods__["a_size"] = _glpki._glp_graph_a_size_set
    __swig_getmethods__["a_size"] = _glpki._glp_graph_a_size_get
    if _newclass:a_size = _swig_property(_glpki._glp_graph_a_size_get, _glpki._glp_graph_a_size_set)
    def __init__(self, *args): 
        this = _glpki.new__glp_graph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete__glp_graph
    __del__ = lambda self : None;
_glp_graph_swigregister = _glpki._glp_graph_swigregister
_glp_graph_swigregister(_glp_graph)

class _glp_vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _glp_vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _glp_vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _glpki._glp_vertex_i_set
    __swig_getmethods__["i"] = _glpki._glp_vertex_i_get
    if _newclass:i = _swig_property(_glpki._glp_vertex_i_get, _glpki._glp_vertex_i_set)
    __swig_setmethods__["name"] = _glpki._glp_vertex_name_set
    __swig_getmethods__["name"] = _glpki._glp_vertex_name_get
    if _newclass:name = _swig_property(_glpki._glp_vertex_name_get, _glpki._glp_vertex_name_set)
    __swig_setmethods__["entry"] = _glpki._glp_vertex_entry_set
    __swig_getmethods__["entry"] = _glpki._glp_vertex_entry_get
    if _newclass:entry = _swig_property(_glpki._glp_vertex_entry_get, _glpki._glp_vertex_entry_set)
    __swig_setmethods__["data"] = _glpki._glp_vertex_data_set
    __swig_getmethods__["data"] = _glpki._glp_vertex_data_get
    if _newclass:data = _swig_property(_glpki._glp_vertex_data_get, _glpki._glp_vertex_data_set)
    __swig_setmethods__["temp"] = _glpki._glp_vertex_temp_set
    __swig_getmethods__["temp"] = _glpki._glp_vertex_temp_get
    if _newclass:temp = _swig_property(_glpki._glp_vertex_temp_get, _glpki._glp_vertex_temp_set)
    __swig_setmethods__["_in"] = _glpki._glp_vertex__in_set
    __swig_getmethods__["_in"] = _glpki._glp_vertex__in_get
    if _newclass:_in = _swig_property(_glpki._glp_vertex__in_get, _glpki._glp_vertex__in_set)
    __swig_setmethods__["out"] = _glpki._glp_vertex_out_set
    __swig_getmethods__["out"] = _glpki._glp_vertex_out_get
    if _newclass:out = _swig_property(_glpki._glp_vertex_out_get, _glpki._glp_vertex_out_set)
    def __init__(self, *args): 
        this = _glpki.new__glp_vertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete__glp_vertex
    __del__ = lambda self : None;
_glp_vertex_swigregister = _glpki._glp_vertex_swigregister
_glp_vertex_swigregister(_glp_vertex)

class _glp_arc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _glp_arc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _glp_arc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tail"] = _glpki._glp_arc_tail_set
    __swig_getmethods__["tail"] = _glpki._glp_arc_tail_get
    if _newclass:tail = _swig_property(_glpki._glp_arc_tail_get, _glpki._glp_arc_tail_set)
    __swig_setmethods__["head"] = _glpki._glp_arc_head_set
    __swig_getmethods__["head"] = _glpki._glp_arc_head_get
    if _newclass:head = _swig_property(_glpki._glp_arc_head_get, _glpki._glp_arc_head_set)
    __swig_setmethods__["data"] = _glpki._glp_arc_data_set
    __swig_getmethods__["data"] = _glpki._glp_arc_data_get
    if _newclass:data = _swig_property(_glpki._glp_arc_data_get, _glpki._glp_arc_data_set)
    __swig_setmethods__["temp"] = _glpki._glp_arc_temp_set
    __swig_getmethods__["temp"] = _glpki._glp_arc_temp_get
    if _newclass:temp = _swig_property(_glpki._glp_arc_temp_get, _glpki._glp_arc_temp_set)
    __swig_setmethods__["t_prev"] = _glpki._glp_arc_t_prev_set
    __swig_getmethods__["t_prev"] = _glpki._glp_arc_t_prev_get
    if _newclass:t_prev = _swig_property(_glpki._glp_arc_t_prev_get, _glpki._glp_arc_t_prev_set)
    __swig_setmethods__["t_next"] = _glpki._glp_arc_t_next_set
    __swig_getmethods__["t_next"] = _glpki._glp_arc_t_next_get
    if _newclass:t_next = _swig_property(_glpki._glp_arc_t_next_get, _glpki._glp_arc_t_next_set)
    __swig_setmethods__["h_prev"] = _glpki._glp_arc_h_prev_set
    __swig_getmethods__["h_prev"] = _glpki._glp_arc_h_prev_get
    if _newclass:h_prev = _swig_property(_glpki._glp_arc_h_prev_get, _glpki._glp_arc_h_prev_set)
    __swig_setmethods__["h_next"] = _glpki._glp_arc_h_next_set
    __swig_getmethods__["h_next"] = _glpki._glp_arc_h_next_get
    if _newclass:h_next = _swig_property(_glpki._glp_arc_h_next_get, _glpki._glp_arc_h_next_set)
    def __init__(self, *args): 
        this = _glpki.new__glp_arc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete__glp_arc
    __del__ = lambda self : None;
_glp_arc_swigregister = _glpki._glp_arc_swigregister
_glp_arc_swigregister(_glp_arc)

glp_create_graph = _glpki.glp_create_graph
glp_set_graph_name = _glpki.glp_set_graph_name
glp_add_vertices = _glpki.glp_add_vertices
glp_add_arc = _glpki.glp_add_arc
glp_erase_graph = _glpki.glp_erase_graph
glp_delete_graph = _glpki.glp_delete_graph
glp_mincost_lp = _glpki.glp_mincost_lp
glp_mincost_okalg = _glpki.glp_mincost_okalg
glp_maxflow_lp = _glpki.glp_maxflow_lp
glp_maxflow_ffalg = _glpki.glp_maxflow_ffalg
glp_read_mincost = _glpki.glp_read_mincost
glp_write_mincost = _glpki.glp_write_mincost
glp_read_maxflow = _glpki.glp_read_maxflow
glp_write_maxflow = _glpki.glp_write_maxflow
glp_netgen = _glpki.glp_netgen
glp_gridgen = _glpki.glp_gridgen
glp_rmfgen = _glpki.glp_rmfgen
glp_weak_comp = _glpki.glp_weak_comp
LPX_LP = _glpki.LPX_LP
LPX_MIP = _glpki.LPX_MIP
LPX_FR = _glpki.LPX_FR
LPX_LO = _glpki.LPX_LO
LPX_UP = _glpki.LPX_UP
LPX_DB = _glpki.LPX_DB
LPX_FX = _glpki.LPX_FX
LPX_MIN = _glpki.LPX_MIN
LPX_MAX = _glpki.LPX_MAX
LPX_P_UNDEF = _glpki.LPX_P_UNDEF
LPX_P_FEAS = _glpki.LPX_P_FEAS
LPX_P_INFEAS = _glpki.LPX_P_INFEAS
LPX_P_NOFEAS = _glpki.LPX_P_NOFEAS
LPX_D_UNDEF = _glpki.LPX_D_UNDEF
LPX_D_FEAS = _glpki.LPX_D_FEAS
LPX_D_INFEAS = _glpki.LPX_D_INFEAS
LPX_D_NOFEAS = _glpki.LPX_D_NOFEAS
LPX_BS = _glpki.LPX_BS
LPX_NL = _glpki.LPX_NL
LPX_NU = _glpki.LPX_NU
LPX_NF = _glpki.LPX_NF
LPX_NS = _glpki.LPX_NS
LPX_T_UNDEF = _glpki.LPX_T_UNDEF
LPX_T_OPT = _glpki.LPX_T_OPT
LPX_CV = _glpki.LPX_CV
LPX_IV = _glpki.LPX_IV
LPX_I_UNDEF = _glpki.LPX_I_UNDEF
LPX_I_OPT = _glpki.LPX_I_OPT
LPX_I_FEAS = _glpki.LPX_I_FEAS
LPX_I_NOFEAS = _glpki.LPX_I_NOFEAS
LPX_OPT = _glpki.LPX_OPT
LPX_FEAS = _glpki.LPX_FEAS
LPX_INFEAS = _glpki.LPX_INFEAS
LPX_NOFEAS = _glpki.LPX_NOFEAS
LPX_UNBND = _glpki.LPX_UNBND
LPX_UNDEF = _glpki.LPX_UNDEF
LPX_E_OK = _glpki.LPX_E_OK
LPX_E_EMPTY = _glpki.LPX_E_EMPTY
LPX_E_BADB = _glpki.LPX_E_BADB
LPX_E_INFEAS = _glpki.LPX_E_INFEAS
LPX_E_FAULT = _glpki.LPX_E_FAULT
LPX_E_OBJLL = _glpki.LPX_E_OBJLL
LPX_E_OBJUL = _glpki.LPX_E_OBJUL
LPX_E_ITLIM = _glpki.LPX_E_ITLIM
LPX_E_TMLIM = _glpki.LPX_E_TMLIM
LPX_E_NOFEAS = _glpki.LPX_E_NOFEAS
LPX_E_INSTAB = _glpki.LPX_E_INSTAB
LPX_E_SING = _glpki.LPX_E_SING
LPX_E_NOCONV = _glpki.LPX_E_NOCONV
LPX_E_NOPFS = _glpki.LPX_E_NOPFS
LPX_E_NODFS = _glpki.LPX_E_NODFS
LPX_E_MIPGAP = _glpki.LPX_E_MIPGAP
LPX_K_MSGLEV = _glpki.LPX_K_MSGLEV
LPX_K_SCALE = _glpki.LPX_K_SCALE
LPX_K_DUAL = _glpki.LPX_K_DUAL
LPX_K_PRICE = _glpki.LPX_K_PRICE
LPX_K_RELAX = _glpki.LPX_K_RELAX
LPX_K_TOLBND = _glpki.LPX_K_TOLBND
LPX_K_TOLDJ = _glpki.LPX_K_TOLDJ
LPX_K_TOLPIV = _glpki.LPX_K_TOLPIV
LPX_K_ROUND = _glpki.LPX_K_ROUND
LPX_K_OBJLL = _glpki.LPX_K_OBJLL
LPX_K_OBJUL = _glpki.LPX_K_OBJUL
LPX_K_ITLIM = _glpki.LPX_K_ITLIM
LPX_K_ITCNT = _glpki.LPX_K_ITCNT
LPX_K_TMLIM = _glpki.LPX_K_TMLIM
LPX_K_OUTFRQ = _glpki.LPX_K_OUTFRQ
LPX_K_OUTDLY = _glpki.LPX_K_OUTDLY
LPX_K_BRANCH = _glpki.LPX_K_BRANCH
LPX_K_BTRACK = _glpki.LPX_K_BTRACK
LPX_K_TOLINT = _glpki.LPX_K_TOLINT
LPX_K_TOLOBJ = _glpki.LPX_K_TOLOBJ
LPX_K_MPSINFO = _glpki.LPX_K_MPSINFO
LPX_K_MPSOBJ = _glpki.LPX_K_MPSOBJ
LPX_K_MPSORIG = _glpki.LPX_K_MPSORIG
LPX_K_MPSWIDE = _glpki.LPX_K_MPSWIDE
LPX_K_MPSFREE = _glpki.LPX_K_MPSFREE
LPX_K_MPSSKIP = _glpki.LPX_K_MPSSKIP
LPX_K_LPTORIG = _glpki.LPX_K_LPTORIG
LPX_K_PRESOL = _glpki.LPX_K_PRESOL
LPX_K_BINARIZE = _glpki.LPX_K_BINARIZE
LPX_K_USECUTS = _glpki.LPX_K_USECUTS
LPX_K_BFTYPE = _glpki.LPX_K_BFTYPE
LPX_K_MIPGAP = _glpki.LPX_K_MIPGAP
LPX_C_COVER = _glpki.LPX_C_COVER
LPX_C_CLIQUE = _glpki.LPX_C_CLIQUE
LPX_C_GOMORY = _glpki.LPX_C_GOMORY
LPX_C_MIR = _glpki.LPX_C_MIR
LPX_C_ALL = _glpki.LPX_C_ALL
class LPXKKT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LPXKKT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LPXKKT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pe_ae_max"] = _glpki.LPXKKT_pe_ae_max_set
    __swig_getmethods__["pe_ae_max"] = _glpki.LPXKKT_pe_ae_max_get
    if _newclass:pe_ae_max = _swig_property(_glpki.LPXKKT_pe_ae_max_get, _glpki.LPXKKT_pe_ae_max_set)
    __swig_setmethods__["pe_ae_row"] = _glpki.LPXKKT_pe_ae_row_set
    __swig_getmethods__["pe_ae_row"] = _glpki.LPXKKT_pe_ae_row_get
    if _newclass:pe_ae_row = _swig_property(_glpki.LPXKKT_pe_ae_row_get, _glpki.LPXKKT_pe_ae_row_set)
    __swig_setmethods__["pe_re_max"] = _glpki.LPXKKT_pe_re_max_set
    __swig_getmethods__["pe_re_max"] = _glpki.LPXKKT_pe_re_max_get
    if _newclass:pe_re_max = _swig_property(_glpki.LPXKKT_pe_re_max_get, _glpki.LPXKKT_pe_re_max_set)
    __swig_setmethods__["pe_re_row"] = _glpki.LPXKKT_pe_re_row_set
    __swig_getmethods__["pe_re_row"] = _glpki.LPXKKT_pe_re_row_get
    if _newclass:pe_re_row = _swig_property(_glpki.LPXKKT_pe_re_row_get, _glpki.LPXKKT_pe_re_row_set)
    __swig_setmethods__["pe_quality"] = _glpki.LPXKKT_pe_quality_set
    __swig_getmethods__["pe_quality"] = _glpki.LPXKKT_pe_quality_get
    if _newclass:pe_quality = _swig_property(_glpki.LPXKKT_pe_quality_get, _glpki.LPXKKT_pe_quality_set)
    __swig_setmethods__["pb_ae_max"] = _glpki.LPXKKT_pb_ae_max_set
    __swig_getmethods__["pb_ae_max"] = _glpki.LPXKKT_pb_ae_max_get
    if _newclass:pb_ae_max = _swig_property(_glpki.LPXKKT_pb_ae_max_get, _glpki.LPXKKT_pb_ae_max_set)
    __swig_setmethods__["pb_ae_ind"] = _glpki.LPXKKT_pb_ae_ind_set
    __swig_getmethods__["pb_ae_ind"] = _glpki.LPXKKT_pb_ae_ind_get
    if _newclass:pb_ae_ind = _swig_property(_glpki.LPXKKT_pb_ae_ind_get, _glpki.LPXKKT_pb_ae_ind_set)
    __swig_setmethods__["pb_re_max"] = _glpki.LPXKKT_pb_re_max_set
    __swig_getmethods__["pb_re_max"] = _glpki.LPXKKT_pb_re_max_get
    if _newclass:pb_re_max = _swig_property(_glpki.LPXKKT_pb_re_max_get, _glpki.LPXKKT_pb_re_max_set)
    __swig_setmethods__["pb_re_ind"] = _glpki.LPXKKT_pb_re_ind_set
    __swig_getmethods__["pb_re_ind"] = _glpki.LPXKKT_pb_re_ind_get
    if _newclass:pb_re_ind = _swig_property(_glpki.LPXKKT_pb_re_ind_get, _glpki.LPXKKT_pb_re_ind_set)
    __swig_setmethods__["pb_quality"] = _glpki.LPXKKT_pb_quality_set
    __swig_getmethods__["pb_quality"] = _glpki.LPXKKT_pb_quality_get
    if _newclass:pb_quality = _swig_property(_glpki.LPXKKT_pb_quality_get, _glpki.LPXKKT_pb_quality_set)
    __swig_setmethods__["de_ae_max"] = _glpki.LPXKKT_de_ae_max_set
    __swig_getmethods__["de_ae_max"] = _glpki.LPXKKT_de_ae_max_get
    if _newclass:de_ae_max = _swig_property(_glpki.LPXKKT_de_ae_max_get, _glpki.LPXKKT_de_ae_max_set)
    __swig_setmethods__["de_ae_col"] = _glpki.LPXKKT_de_ae_col_set
    __swig_getmethods__["de_ae_col"] = _glpki.LPXKKT_de_ae_col_get
    if _newclass:de_ae_col = _swig_property(_glpki.LPXKKT_de_ae_col_get, _glpki.LPXKKT_de_ae_col_set)
    __swig_setmethods__["de_re_max"] = _glpki.LPXKKT_de_re_max_set
    __swig_getmethods__["de_re_max"] = _glpki.LPXKKT_de_re_max_get
    if _newclass:de_re_max = _swig_property(_glpki.LPXKKT_de_re_max_get, _glpki.LPXKKT_de_re_max_set)
    __swig_setmethods__["de_re_col"] = _glpki.LPXKKT_de_re_col_set
    __swig_getmethods__["de_re_col"] = _glpki.LPXKKT_de_re_col_get
    if _newclass:de_re_col = _swig_property(_glpki.LPXKKT_de_re_col_get, _glpki.LPXKKT_de_re_col_set)
    __swig_setmethods__["de_quality"] = _glpki.LPXKKT_de_quality_set
    __swig_getmethods__["de_quality"] = _glpki.LPXKKT_de_quality_get
    if _newclass:de_quality = _swig_property(_glpki.LPXKKT_de_quality_get, _glpki.LPXKKT_de_quality_set)
    __swig_setmethods__["db_ae_max"] = _glpki.LPXKKT_db_ae_max_set
    __swig_getmethods__["db_ae_max"] = _glpki.LPXKKT_db_ae_max_get
    if _newclass:db_ae_max = _swig_property(_glpki.LPXKKT_db_ae_max_get, _glpki.LPXKKT_db_ae_max_set)
    __swig_setmethods__["db_ae_ind"] = _glpki.LPXKKT_db_ae_ind_set
    __swig_getmethods__["db_ae_ind"] = _glpki.LPXKKT_db_ae_ind_get
    if _newclass:db_ae_ind = _swig_property(_glpki.LPXKKT_db_ae_ind_get, _glpki.LPXKKT_db_ae_ind_set)
    __swig_setmethods__["db_re_max"] = _glpki.LPXKKT_db_re_max_set
    __swig_getmethods__["db_re_max"] = _glpki.LPXKKT_db_re_max_get
    if _newclass:db_re_max = _swig_property(_glpki.LPXKKT_db_re_max_get, _glpki.LPXKKT_db_re_max_set)
    __swig_setmethods__["db_re_ind"] = _glpki.LPXKKT_db_re_ind_set
    __swig_getmethods__["db_re_ind"] = _glpki.LPXKKT_db_re_ind_get
    if _newclass:db_re_ind = _swig_property(_glpki.LPXKKT_db_re_ind_get, _glpki.LPXKKT_db_re_ind_set)
    __swig_setmethods__["db_quality"] = _glpki.LPXKKT_db_quality_set
    __swig_getmethods__["db_quality"] = _glpki.LPXKKT_db_quality_get
    if _newclass:db_quality = _swig_property(_glpki.LPXKKT_db_quality_get, _glpki.LPXKKT_db_quality_set)
    __swig_setmethods__["cs_ae_max"] = _glpki.LPXKKT_cs_ae_max_set
    __swig_getmethods__["cs_ae_max"] = _glpki.LPXKKT_cs_ae_max_get
    if _newclass:cs_ae_max = _swig_property(_glpki.LPXKKT_cs_ae_max_get, _glpki.LPXKKT_cs_ae_max_set)
    __swig_setmethods__["cs_ae_ind"] = _glpki.LPXKKT_cs_ae_ind_set
    __swig_getmethods__["cs_ae_ind"] = _glpki.LPXKKT_cs_ae_ind_get
    if _newclass:cs_ae_ind = _swig_property(_glpki.LPXKKT_cs_ae_ind_get, _glpki.LPXKKT_cs_ae_ind_set)
    __swig_setmethods__["cs_re_max"] = _glpki.LPXKKT_cs_re_max_set
    __swig_getmethods__["cs_re_max"] = _glpki.LPXKKT_cs_re_max_get
    if _newclass:cs_re_max = _swig_property(_glpki.LPXKKT_cs_re_max_get, _glpki.LPXKKT_cs_re_max_set)
    __swig_setmethods__["cs_re_ind"] = _glpki.LPXKKT_cs_re_ind_set
    __swig_getmethods__["cs_re_ind"] = _glpki.LPXKKT_cs_re_ind_get
    if _newclass:cs_re_ind = _swig_property(_glpki.LPXKKT_cs_re_ind_get, _glpki.LPXKKT_cs_re_ind_set)
    __swig_setmethods__["cs_quality"] = _glpki.LPXKKT_cs_quality_set
    __swig_getmethods__["cs_quality"] = _glpki.LPXKKT_cs_quality_get
    if _newclass:cs_quality = _swig_property(_glpki.LPXKKT_cs_quality_get, _glpki.LPXKKT_cs_quality_set)
    def __init__(self, *args): 
        this = _glpki.new_LPXKKT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_LPXKKT
    __del__ = lambda self : None;
LPXKKT_swigregister = _glpki.LPXKKT_swigregister
LPXKKT_swigregister(LPXKKT)

_glp_lpx_create_prob = _glpki._glp_lpx_create_prob
_glp_lpx_set_prob_name = _glpki._glp_lpx_set_prob_name
_glp_lpx_set_obj_name = _glpki._glp_lpx_set_obj_name
_glp_lpx_set_obj_dir = _glpki._glp_lpx_set_obj_dir
_glp_lpx_add_rows = _glpki._glp_lpx_add_rows
_glp_lpx_add_cols = _glpki._glp_lpx_add_cols
_glp_lpx_set_row_name = _glpki._glp_lpx_set_row_name
_glp_lpx_set_col_name = _glpki._glp_lpx_set_col_name
_glp_lpx_set_row_bnds = _glpki._glp_lpx_set_row_bnds
_glp_lpx_set_col_bnds = _glpki._glp_lpx_set_col_bnds
_glp_lpx_set_obj_coef = _glpki._glp_lpx_set_obj_coef
_glp_lpx_set_mat_row = _glpki._glp_lpx_set_mat_row
_glp_lpx_set_mat_col = _glpki._glp_lpx_set_mat_col
_glp_lpx_load_matrix = _glpki._glp_lpx_load_matrix
_glp_lpx_del_rows = _glpki._glp_lpx_del_rows
_glp_lpx_del_cols = _glpki._glp_lpx_del_cols
_glp_lpx_delete_prob = _glpki._glp_lpx_delete_prob
_glp_lpx_get_prob_name = _glpki._glp_lpx_get_prob_name
_glp_lpx_get_obj_name = _glpki._glp_lpx_get_obj_name
_glp_lpx_get_obj_dir = _glpki._glp_lpx_get_obj_dir
_glp_lpx_get_num_rows = _glpki._glp_lpx_get_num_rows
_glp_lpx_get_num_cols = _glpki._glp_lpx_get_num_cols
_glp_lpx_get_row_name = _glpki._glp_lpx_get_row_name
_glp_lpx_get_col_name = _glpki._glp_lpx_get_col_name
_glp_lpx_get_row_type = _glpki._glp_lpx_get_row_type
_glp_lpx_get_row_lb = _glpki._glp_lpx_get_row_lb
_glp_lpx_get_row_ub = _glpki._glp_lpx_get_row_ub
_glp_lpx_get_row_bnds = _glpki._glp_lpx_get_row_bnds
_glp_lpx_get_col_type = _glpki._glp_lpx_get_col_type
_glp_lpx_get_col_lb = _glpki._glp_lpx_get_col_lb
_glp_lpx_get_col_ub = _glpki._glp_lpx_get_col_ub
_glp_lpx_get_col_bnds = _glpki._glp_lpx_get_col_bnds
_glp_lpx_get_obj_coef = _glpki._glp_lpx_get_obj_coef
_glp_lpx_get_num_nz = _glpki._glp_lpx_get_num_nz
_glp_lpx_get_mat_row = _glpki._glp_lpx_get_mat_row
_glp_lpx_get_mat_col = _glpki._glp_lpx_get_mat_col
_glp_lpx_create_index = _glpki._glp_lpx_create_index
_glp_lpx_find_row = _glpki._glp_lpx_find_row
_glp_lpx_find_col = _glpki._glp_lpx_find_col
_glp_lpx_delete_index = _glpki._glp_lpx_delete_index
_glp_lpx_scale_prob = _glpki._glp_lpx_scale_prob
_glp_lpx_unscale_prob = _glpki._glp_lpx_unscale_prob
_glp_lpx_set_row_stat = _glpki._glp_lpx_set_row_stat
_glp_lpx_set_col_stat = _glpki._glp_lpx_set_col_stat
_glp_lpx_std_basis = _glpki._glp_lpx_std_basis
_glp_lpx_adv_basis = _glpki._glp_lpx_adv_basis
_glp_lpx_cpx_basis = _glpki._glp_lpx_cpx_basis
_glp_lpx_simplex = _glpki._glp_lpx_simplex
_glp_lpx_exact = _glpki._glp_lpx_exact
_glp_lpx_get_status = _glpki._glp_lpx_get_status
_glp_lpx_get_prim_stat = _glpki._glp_lpx_get_prim_stat
_glp_lpx_get_dual_stat = _glpki._glp_lpx_get_dual_stat
_glp_lpx_get_obj_val = _glpki._glp_lpx_get_obj_val
_glp_lpx_get_row_stat = _glpki._glp_lpx_get_row_stat
_glp_lpx_get_row_prim = _glpki._glp_lpx_get_row_prim
_glp_lpx_get_row_dual = _glpki._glp_lpx_get_row_dual
_glp_lpx_get_row_info = _glpki._glp_lpx_get_row_info
_glp_lpx_get_col_stat = _glpki._glp_lpx_get_col_stat
_glp_lpx_get_col_prim = _glpki._glp_lpx_get_col_prim
_glp_lpx_get_col_dual = _glpki._glp_lpx_get_col_dual
_glp_lpx_get_col_info = _glpki._glp_lpx_get_col_info
_glp_lpx_get_ray_info = _glpki._glp_lpx_get_ray_info
_glp_lpx_check_kkt = _glpki._glp_lpx_check_kkt
_glp_lpx_warm_up = _glpki._glp_lpx_warm_up
_glp_lpx_eval_tab_row = _glpki._glp_lpx_eval_tab_row
_glp_lpx_eval_tab_col = _glpki._glp_lpx_eval_tab_col
_glp_lpx_transform_row = _glpki._glp_lpx_transform_row
_glp_lpx_transform_col = _glpki._glp_lpx_transform_col
_glp_lpx_prim_ratio_test = _glpki._glp_lpx_prim_ratio_test
_glp_lpx_dual_ratio_test = _glpki._glp_lpx_dual_ratio_test
_glp_lpx_interior = _glpki._glp_lpx_interior
_glp_lpx_ipt_status = _glpki._glp_lpx_ipt_status
_glp_lpx_ipt_obj_val = _glpki._glp_lpx_ipt_obj_val
_glp_lpx_ipt_row_prim = _glpki._glp_lpx_ipt_row_prim
_glp_lpx_ipt_row_dual = _glpki._glp_lpx_ipt_row_dual
_glp_lpx_ipt_col_prim = _glpki._glp_lpx_ipt_col_prim
_glp_lpx_ipt_col_dual = _glpki._glp_lpx_ipt_col_dual
_glp_lpx_set_class = _glpki._glp_lpx_set_class
_glp_lpx_get_class = _glpki._glp_lpx_get_class
_glp_lpx_set_col_kind = _glpki._glp_lpx_set_col_kind
_glp_lpx_get_col_kind = _glpki._glp_lpx_get_col_kind
_glp_lpx_get_num_int = _glpki._glp_lpx_get_num_int
_glp_lpx_get_num_bin = _glpki._glp_lpx_get_num_bin
_glp_lpx_integer = _glpki._glp_lpx_integer
_glp_lpx_intopt = _glpki._glp_lpx_intopt
_glp_lpx_mip_status = _glpki._glp_lpx_mip_status
_glp_lpx_mip_obj_val = _glpki._glp_lpx_mip_obj_val
_glp_lpx_mip_row_val = _glpki._glp_lpx_mip_row_val
_glp_lpx_mip_col_val = _glpki._glp_lpx_mip_col_val
_glp_lpx_check_int = _glpki._glp_lpx_check_int
_glp_lpx_reset_parms = _glpki._glp_lpx_reset_parms
_glp_lpx_set_int_parm = _glpki._glp_lpx_set_int_parm
_glp_lpx_get_int_parm = _glpki._glp_lpx_get_int_parm
_glp_lpx_set_real_parm = _glpki._glp_lpx_set_real_parm
_glp_lpx_get_real_parm = _glpki._glp_lpx_get_real_parm
_glp_lpx_read_mps = _glpki._glp_lpx_read_mps
_glp_lpx_write_mps = _glpki._glp_lpx_write_mps
_glp_lpx_read_bas = _glpki._glp_lpx_read_bas
_glp_lpx_write_bas = _glpki._glp_lpx_write_bas
_glp_lpx_read_freemps = _glpki._glp_lpx_read_freemps
_glp_lpx_write_freemps = _glpki._glp_lpx_write_freemps
_glp_lpx_read_cpxlp = _glpki._glp_lpx_read_cpxlp
_glp_lpx_write_cpxlp = _glpki._glp_lpx_write_cpxlp
_glp_lpx_read_model = _glpki._glp_lpx_read_model
_glp_lpx_print_prob = _glpki._glp_lpx_print_prob
_glp_lpx_print_sol = _glpki._glp_lpx_print_sol
_glp_lpx_print_sens_bnds = _glpki._glp_lpx_print_sens_bnds
_glp_lpx_print_ips = _glpki._glp_lpx_print_ips
_glp_lpx_print_mip = _glpki._glp_lpx_print_mip
_glp_lpx_is_b_avail = _glpki._glp_lpx_is_b_avail
_glp_lpx_write_pb = _glpki._glp_lpx_write_pb
_glp_lpx_main = _glpki._glp_lpx_main
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _glpki.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _glpki.intArray___getitem__(*args)
    def __setitem__(*args): return _glpki.intArray___setitem__(*args)
    def cast(*args): return _glpki.intArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _glpki.intArray_frompointer
    if _newclass:frompointer = staticmethod(_glpki.intArray_frompointer)
intArray_swigregister = _glpki.intArray_swigregister
intArray_swigregister(intArray)
intArray_frompointer = _glpki.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _glpki.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _glpki.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(*args): return _glpki.doubleArray___getitem__(*args)
    def __setitem__(*args): return _glpki.doubleArray___setitem__(*args)
    def cast(*args): return _glpki.doubleArray_cast(*args)
    __swig_getmethods__["frompointer"] = lambda x: _glpki.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_glpki.doubleArray_frompointer)
doubleArray_swigregister = _glpki.doubleArray_swigregister
doubleArray_swigregister(doubleArray)
doubleArray_frompointer = _glpki.doubleArray_frompointer



